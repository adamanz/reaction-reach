#!/usr/bin/env python3
"""
Test Gmail drafts with fresh authentication
"""
import json
import subprocess
import tempfile
import os
from datetime import datetime

def test_fresh_gmail_auth():
    """Test Gmail with fresh authentication"""
    
    print("🔄 Testing Gmail with Fresh Authentication")
    print("=" * 50)
    
    # Test 1: Very simple draft
    print("1. Creating simple test draft...")
    
    simple_test = {
        "to": ["adam@mysimplestack.com"],
        "subject": f"✅ FRESH AUTH TEST - {datetime.now().strftime('%H:%M:%S')}",
        "body": f"""Success! Gmail MCP is working with fresh authentication.

Time: {datetime.now()}
Test: Fresh OAuth authentication

This draft should appear in your Gmail drafts folder immediately.

If you see this, the LinkedIn → Gmail integration is fully operational!
"""
    }
    
    success1 = create_and_verify_draft(simple_test, "Simple Test")
    
    # Test 2: LinkedIn-style draft
    if success1:
        print("\n2. Creating LinkedIn-style draft...")
        
        linkedin_test = {
            "to": ["adam@mysimplestack.com"],
            "subject": "LinkedIn Outreach: Test Contact (Fresh Auth)",
            "body": """Hi Adam,

This is a test of the LinkedIn → Gmail integration with fresh OAuth authentication.

Contact Details:
- Name: Test LinkedIn Contact
- Title: Software Engineer at TechCorp
- Company: TechCorp
- Connection: 1st degree
- Profile: https://linkedin.com/in/test

Personalized Message:
---
Hi Test,

I hope this email finds you well! I noticed you reacted to my recent LinkedIn post and wanted to reach out personally to thank you for the engagement.

As someone in the tech space, I thought you might find value in the discussions around innovation and technology trends that my posts often generate.

I'd love to learn more about your work at TechCorp and explore potential ways we might collaborate or share insights in our respective fields.

Since we're already connected on LinkedIn, I thought it would be great to take our professional relationship beyond the platform.

Would you be open to a brief coffee chat or video call in the coming weeks?

Best regards,
Adam Anzuoni

---
Generated by LinkedIn Reactions Extractor
Fresh Auth Test: {datetime.now()}
"""
        }
        
        success2 = create_and_verify_draft(linkedin_test, "LinkedIn-style Draft")
        
        if success2:
            print("\n🎉 BOTH TESTS SUCCESSFUL!")
            print("📧 Check your Gmail drafts folder now")
            print("🔍 Look for:")
            print(f"   - '✅ FRESH AUTH TEST - {datetime.now().strftime('%H:%M:%S')}'")
            print("   - 'LinkedIn Outreach: Test Contact (Fresh Auth)'")
        else:
            print("\n⚠️ LinkedIn-style draft failed")
    else:
        print("\n❌ Simple test failed - authentication issue")

def create_and_verify_draft(email_data, test_name):
    """Create a draft and verify it was created"""
    
    try:
        # Create temporary file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(email_data, f, indent=2)
            temp_file = f.name
        
        print(f"📝 Creating {test_name}...")
        print(f"📧 Subject: {email_data['subject']}")
        
        # Call Gmail MCP
        result = subprocess.run([
            "npx", "@gongrzhe/server-gmail-autoauth-mcp",
            "draft_email",
            "--input", temp_file
        ], capture_output=True, text=True, timeout=60)
        
        print(f"📤 Command executed")
        print(f"🔄 Return code: {result.returncode}")
        
        if result.stdout.strip():
            print(f"📤 Output: {result.stdout}")
        
        if result.stderr.strip():
            print(f"🚨 Errors: {result.stderr}")
        
        if result.returncode == 0:
            print(f"✅ {test_name} SUCCESS!")
            return True
        else:
            print(f"❌ {test_name} FAILED!")
            return False
            
    except Exception as e:
        print(f"❌ Exception creating {test_name}: {e}")
        return False
    finally:
        if 'temp_file' in locals() and os.path.exists(temp_file):
            os.unlink(temp_file)

if __name__ == "__main__":
    test_fresh_gmail_auth()